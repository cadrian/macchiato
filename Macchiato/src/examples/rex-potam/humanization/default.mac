#!/usr/bin/macchiato
/*
 * This file is part of Macchiato.
 *
 * Macchiato is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * Macchiato is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Macchiato.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * This is the default advanced humanization.
 */

import itf "interface.mac";
import utl "utils.mac";

def humanize(value, anchor, percent) {
    if value == 0 {
        Result = 0;
    } else {
        Result = utl.Anchored(value, anchor, percent);
        if Result <= 0 {
            Result = 1;
        }
    }
}

def tick(Event, sign) {
    // humanize tick, except for the drummer (that sounds drunk)
    if (Event.Channel == 9) {
        Result = Event.Tick;
    } else if (sign == 0) {
        Result = Event.Tick + random(10) - 5;
        if Result < 0 {
            Result = 0;
        }
    } else {
        Result = Event.Tick + random(5) * sign;
    }
}

class DefaultHumanizer (itf.Humanizer) {

    tracknum;
    portamento;
    velocity;
    expression;
    volume;
    running;
    notes;

    def DefaultHumanizer() {
        tracknum = 0;
    }

    def StartSequence() {
        print("Running default humanizer");
    }

    def EndSequence() {
        write("record", record);
        write("notes", notes);
    }

    def StartTrack() {
        // velocity records the current velocity, per channel, per pitch
        velocity = [[], [], [], [], [], [], [], [],
                    [], [], [], [], [], [], [], []];

        // expression records the current expression, per channel
        expression = [127, 127, 127, 127, 127, 127, 127, 127,
                      127, 127, 127, 127, 127, 127, 127, 127];

        // volume records the current expression, per channel
        volume = [127, 127, 127, 127, 127, 127, 127, 127,
                  127, 127, 127, 127, 127, 127, 127, 127];

        // running records the currently running notes per channel
        // For each channel, the array index is the pitch of the note;
        // its value is the start tick of the note
        running = [[], [], [], [], [], [], [], [],
                   [], [], [], [], [], [], [], []];

        // notes records the note lengths per track, per channel
        // For each track, each channel, the array index is the start tick of each note;
        // its value is an array: index = pitch, value = length
        notes[tracknum] = [[], [], [], [], [], [], [], [],
                           [], [], [], [], [], [], [], []];

        // Portamento pedal state
        portamento = false;
    }

    def EndTrack() {
        record[tracknum] = {
            "velocity": velocity,
            "expression": expression
        };
        tracknum = tracknum + 1;
    }

    def TrackNumber() {
        Result = tracknum;
    }

    def Tempo(Event) {
        // ignored
    }

    def NoteOn(Event) {
        // Record the velocity
        velocity[Event.Channel][Event.Pitch] = Event.Velocity;

        if (Event.Channel == 9) or (volume[Event.Channel] > 0) {
            // Emit an Event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            local v = velocity[Event.Channel][Event.Pitch];
            local e = expression[Event.Channel];
            if (v > 0) and (e > 0) {
                v = (humanize(v, v, 10) * e) / 127;
                local t = tick(Event, 1);
                running[Event.Channel][Event.Pitch] = t;
                emit NOTE_ON(Event.Channel, Event.Pitch, v) at t;
            } else {
                velocity[Event.Channel][Event.Pitch] = 0;
            }
        }
    }

    def NoteOnOff(Event) {
        if (Event.Channel != 9) and (volume[Event.Channel] == 0) {
            next;
        }

        // Emit an Event with a velocity that depends on the expression,
        // and with a bit of random for rough "humanization"
        // Note that expression may have changed so the release velocity is not
        // necessarily equal to the press velocity
        local t = tick(Event, -1);
        if portamento {
            velocity[Event.Channel][Event.Pitch] = t;
            emit NOTE_ON(Event.Channel, Event.Pitch, 0) at t;
        } else if velocity[Event.Channel][Event.Pitch] > 0 {
            local v = velocity[Event.Channel][Event.Pitch];
            local e = expression[Event.Channel];
            v = (humanize(v, v, 10) * e) / 127;
            record_note_length(Event.Channel, Event.Pitch, t);
            emit NOTE_OFF(Event.Channel, Event.Pitch, v) at t;
        }
    }

    def record_note_length(channel, pitch, tick) {
        local start = running[channel][pitch];
        local length = tick - start;
        notes[tracknum][channel][start][pitch] = length;
    }

    def NoteOff(Event) {
        // For completion only -- because NoteWorthy Composer
        // does not emit those Events

        if (volume[Event.Channel] > 0) and (velocity[Event.Channel][Event.Pitch] > 0) {
            // Emit an Event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            // Note that expression may have changed so the release velocity is not
            // necessarily equal to the press velocity
            local v = (Event.Velocity * expression[Event.Channel]) / 127;
            v = humanize(v, v, 10);
            local t = tick(Event, -1);
            record_note_length(Event.Channel, Event.Pitch, t);
            velocity[Event.Channel][Event.Pitch] = 0;
            emit NOTE_OFF(Event.Channel, Event.Pitch, v) at t;
        }
    }

    def Expression(Event) {
        // Record the expression value
        expression[Event.Channel] = Event.Value;
    }

    def Volume(Event) {
        // Record the volume value
        volume[Event.Channel] = Event.Value;
    }

    def Portamento(Event) {
        portamento = Event.Value
    }

    def PortamentoTime(Event) {
        // humanize this Event too
        local v = Event.Value;
        v = humanize(v, v, 10);
        local t = tick(Event, 0);
        emit CONTROL_CHANGE(Event.Channel, PORTAMENTO_TIME, v) at t;
    }

}
