#!/usr/bin/macchiato
/*
 * This file is part of Macchiato.
 *
 * Macchiato is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * Macchiato is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Macchiato.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * This is the default advanced humanization.
 */

import itf "interface.mac";
import utl "utils.mac";

def humanize(value, anchor, percent) {
    if value == 0 {
        Result = 0;
    } else {
        Result = utl.Anchored(value, anchor, percent);
        if Result < 1 {
            Result = 1;
        } else if (Result > 127) {
            Result = 127;
        }
        System.Print("humanize: " + System.ToString(value) + " (" + System.ToString(percent) + "%) => " + System.ToString(Result))
    }
}

def tick(t, sign, width, tn, td) {
    if width < 1 {
        Result = t
    } else {
        Result = t + System.GaussRandom(2 * width) + (sign * width);
        if Result < 1 {
            Result = 1;
        }
    }
    System.Print("TICK: " + System.ToString(tn) + "/" + System.ToString(td));
    Result = (Result * tn) / td;
}

class DefaultHumanizer (itf.Humanizer) {

    tracknum;
    portamento;
    velocity;
    expression;
    volume;
    running;
    notes;
    tickWidth;
    velocityWidth;
    bpm;
    beat;
    chordOn;
    chordOff;
    pedal;

    timeN;
    timeD;

    factorVelocity;
    factorExpression;
    factorVolume;

    legatoStrength;
    beatDepth;

    tickWidthDivisor;
    legatoStrengthDivisor;
    beatDepthDivisor;

    def DefaultHumanizer(arg) {
        tracknum = 0;
        tickWidth = 20;
        velocityWidth = 20;
        beat = 4;

        timeN = 1;
        timeD = 1;
        factorVelocity = 1;
        factorExpression = 1;
        factorVolume = 0;

        legatoStrength = 0;
        beatDepth = 64;

        tickWidthDivisor = 4;
        legatoStrengthDivisor = 16;
        beatDepthDivisor = 16;

        if (arg exists) and not (arg == "") {
            setFromArg(System.FromString(arg));
        }
        System.Print("**** DEFAULT HUMANIZER: " + System.ToString(timeN) + "/" + System.ToString(timeD));
    }

    def setFromArg(arg) {
        if (arg[0] exists) and (arg[1] exists) {
            // legacy
            timeN = arg[0];
            timeD = arg[1];
        } else {
            System.Print("Setting arg: " + System.ToString(arg))
            // cleaner way to set conf
            if arg["timeNumerator"] exists {
                timeN = arg["timeNumerator"];
                System.Print("Setting time numerator to " + System.ToString(timeN));
            }
            if arg["timeDenominator"] exists {
                timeD = arg["timeDenominator"];
                System.Print("Setting time denominator to " + System.ToString(timeD));
            }
            if arg["velocityWidth"] exists {
                velocityWidth = arg["velocityWidth"]
                System.Print("Setting velocity width to " + System.ToString(velocityWidth));
            }
            if arg["factorVelocity"] exists {
                if arg["factorVelocity"] > 0 {
                    factorVelocity = arg["factorVelocity"]
                    System.Print("Setting factor velocity to " + System.ToString(factorVelocity));
                } else {
                    System.Print("Invalid factorVelocity (cannot be null or negative)")
                }
            }
            if arg["factorExpression"] exists {
                if arg["factorExpression"] >= 0 {
                    factorExpression = arg["factorExpression"]
                    System.Print("Setting factor expression to " + System.ToString(factorExpression));
                } else {
                    System.Print("Invalid factorExpression (cannot be negative)")
                }
            }
            if arg["factorVolume"] exists {
                if arg["factorVolume"] >= 0 {
                    factorVolume = arg["factorVolume"]
                    System.Print("Setting factor volume to " + System.ToString(factorVolume));
                } else {
                    System.Print("Invalid factorVolume (cannot be negative)")
                }
            }
            if arg["legatoStrengthDivisor"] exists {
                if arg["legatoStrengthDivisor"] > 0 {
                    legatoStrengthDivisor = arg["legatoStrengthDivisor"]
                    System.Print("Setting legato strength divisor to " + System.ToString(legatoStrengthDivisor));
                } else {
                    System.Print("Invalid legatoStrengthDivisor (cannot be null or negative)")
                }
            }
            if arg["beatDepthDivisor"] exists {
                if arg["beatDepthDivisor"] > 0 {
                    beatDepthDivisor = arg["beatDepthDivisor"]
                    System.Print("Setting beat depth divisor to " + System.ToString(beatDepthDivisor));
                } else {
                    System.Print("Invalid beatDepthDivisor (cannot be null or negative)")
                }
            }
            if arg["tickWidthDivisor"] exists {
                if arg["tickWidthDivisor"] > 0 {
                    tickWidthDivisor = arg["tickWidthDivisor"]
                    System.Print("Setting tick width divisor to " + System.ToString(tickWidthDivisor));
                } else {
                    System.Print("Invalid tickWidthDivisor (cannot be null or negative)")
                }
            }
        }
    }

    def StartSequence() {
        System.Print("Running default humanizer");
    }

    def EndSequence() {
        System.Write("record", record);
        System.Write("notes", notes);
    }

    def StartTrack() {
        // velocity records the current velocity, per channel, per pitch
        velocity = [[], [], [], [], [], [], [], [],
                    [], [], [], [], [], [], [], []];

        // expression records the current expression, per channel
        expression = [127, 127, 127, 127, 127, 127, 127, 127,
                      127, 127, 127, 127, 127, 127, 127, 127];

        // volume records the current volume, per channel
        volume = [127, 127, 127, 127, 127, 127, 127, 127,
                  127, 127, 127, 127, 127, 127, 127, 127];

        // running records the currently running notes per channel
        // For each channel, the array index is the pitch of the note;
        // its value is the start tick of the note
        running = [[], [], [], [], [], [], [], [],
                   [], [], [], [], [], [], [], []];

        // chordOn records the first humanized start tick in a chord
        chordOn = [[], [], [], [], [], [], [], [],
                   [], [], [], [], [], [], [], []];

        // chordOff records the first humanized end tick in a chord
        chordOff = [[], [], [], [], [], [], [], [],
                    [], [], [], [], [], [], [], []];

        // notes records the note lengths per track, per channel
        // For each track, each channel, the array index is the start tick of each note;
        // its value is an array: index = pitch, value = length
        notes[tracknum] = [[], [], [], [], [], [], [], [],
                           [], [], [], [], [], [], [], []];

        // pedal records the current velocity of each pedal. Off is 0.
        pedal[DAMPER_PEDAL] = 0;
        pedal[SOFT_PEDAL] = 0;
        pedal[LEGATO_PEDAL] = 0;
        pedal[SOSTENUTO] = 0;

        // Portamento pedal state
        portamento = false;
    }

    def EndTrack() {
        record[tracknum] = {
            "velocity": velocity,
            "expression": expression,
            "volume": volume
        };
        tracknum = tracknum + 1;
    }

    def TrackNumber() {
        Result = tracknum;
    }

    def Tempo(Event) {
        bpm = Event.Bpm;
        System.Print("TEMPO: " + System.ToString(bpm) + " BPM")
        tickWidth = bpm / (2 * (beat + 1));
        if tickWidth < 1 {
            tickWidth = 1
        }
        System.Print("TICK WIDTH: " + System.ToString(tickWidth))
    }

    def TimeSignature(Event) {
        beat = 2 ^ Event.Denominator;
        System.Print("SIG: " + System.ToString(Event.Numerator) + "/" + System.ToString(beat))
    }

    def Pedal(Event) {
        local v = Event.Value;
        if v > 0 {
            v = humanize(v, v, velocityWidth);
            if v < 1 {
                v = 1
            }
        }
        local t = tick(Event.Tick, 1, tickWidth, timeN, timeD);
        System.Print("PEDAL: " + System.ToString(Event.Tick) + " => " + System.ToString(t))
        pedal[Event.Mpc] = v;
        emit CONTROL_CHANGE(Event.Channel, Event.Mpc, v) at t;
    }

    def NoteOn(Event) {
        // Record the velocity
        velocity[Event.Channel][Event.Pitch] = Event.Velocity;

        if Event.Channel == 9 {
            emit;
        } else if volume[Event.Channel] > 0 {
            // Emit an Event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            local v0 = velocity[Event.Channel][Event.Pitch];
            local h = humanize(v0, v0, velocityWidth);
            local e = expression[Event.Channel];
            local p = volume[Event.Channel];

            // IDEAL SHOULD BE: (but Macchiato does not support floating point numbers)
            // v = ((h ^ factorVelocity) * (e ^ factorExpression) * (p ^ factorVolume)) ^ (1 / (factorVelocity + factorExpression + factorVolume))
            v = ((h ^ factorVelocity) * (e ^ factorExpression) * (p ^ factorVolume)) / (127 ^ (factorVelocity + factorExpression + factorVolume - 1))
            System.Print("VELOCITY: " + System.ToString(v0)
                + " [" + System.ToString(h) + "*" + System.ToString(factorVelocity)
                + ", " + System.ToString(e) + "*" + System.ToString(factorExpression)
                + ", " + System.ToString(p) + "*" + System.ToString(factorVolume)
                +"] => " + System.ToString(v))

            if (v > 0) {
                local t;
                if chordOn[Event.Channel][Event.Tick] exists {
                    System.Print("chordOn exists");
                    t = tick(chordOn[Event.Channel][Event.Tick], 1, tickWidth / beat, timeN, timeD);
                } else if chordOff[Event.Channel][Event.Tick] exists {
                    System.Print("chordOff exists: legato case");
                    // legato -- be careful not to accumulate "lateness"
                    local o = chordOff[Event.Channel][Event.Tick] - (legatoStrength * tickWidth / beat) / legatoStrengthDivisor;
                    local l = Event.Tick - o;
                    if l <= 0 {
                        l = tickWidth / 2;
                    }
                    t = tick(Event.Tick + ((beatDepth - 64) * tickWidth / beat) / beatDepthDivisor, 0, l, timeN, timeD);
                    if t < o {
                        t = o;
                    }
                    chordOn[Event.Channel][Event.Tick] = t;
                } else {
                    System.Print("new chord");
                    t = tick(Event.Tick + ((beatDepth - 64) * tickWidth / beat) / beatDepthDivisor, 1, tickWidth / 2, timeN, timeD);
                    chordOn[Event.Channel][Event.Tick] = t;
                }
                running[Event.Channel][Event.Pitch] = t;
                System.Print("NOTE ON:  " + System.ToString(Event.Tick) + " => " + System.ToString(t));
                emit NOTE_ON(Event.Channel, Event.Pitch, v) at t;
            } else {
                velocity[Event.Channel][Event.Pitch] = 0;
            }
        }
    }

    def NoteOnOff(Event) {
        if Event.Channel == 9 {
            emit;
        } else if volume[Event.Channel] == 0 {
            // nothing
        } else if portamento {
            local t = tickOff(Event);
            velocity[Event.Channel][Event.Pitch] = t;
            emit NOTE_ON(Event.Channel, Event.Pitch, 0) at t;
        } else if velocity[Event.Channel][Event.Pitch] > 0 {
            local v = velocity[Event.Channel][Event.Pitch];
            noteOff(Event, v);
        }
    }

    def NoteOff(Event) {
        // For completion only -- because NoteWorthy Composer
        // does not emit those Events

        if Event.Channel == 9 {
            emit;
        } else if volume[Event.Channel] == 0 {
            // nothing
        } else if portamento {
            local t = tickOff(Event);
            velocity[Event.Channel][Event.Pitch] = t;
            emit NOTE_ON(Event.Channel, Event.Pitch, 0) at t;
        } else if velocity[Event.Channel][Event.Pitch] > 0 {
            noteOff(Event, Event.Velocity);
        }
    }

    def tickOff(Event) {
        local r = running[Event.Channel][Event.Pitch];

        // Emit an Event with a velocity that depends on the expression,
        // and with a bit of random for rough "humanization"
        // Note that expression may have changed so the release velocity is not
        // necessarily equal to the press velocity
        local w = ((Event.Tick - r) / beat) / tickWidthDivisor;
        if w < 1 {
            w = 1;
        } else if w > tickWidth {
            w = tickWidth
        }

        local c;
        local n;

        if chordOff[Event.Channel][Event.Tick] exists {
            c = chordOff[Event.Channel][Event.Tick]
            w = w / (beat + 1)
            n = false
        } else {
            c = Event.Tick + (legatoStrength * tickWidth / beat) / legatoStrengthDivisor;
            n = true
        }

        Result = tick(c, -1, w, timeN, timeD);
        if Result < r {
            local d = ((beatDepth - 64) * tickWidth / beat) / beatDepthDivisor;
            Result = tick(c + d, -1, w, timeN, timeD);
            if Result < r {
                Result = tick(c, 0, w, timeN, timeD);
                if Result < r {
                    Result = tick(c + d, 0, w, timeN, timeD);
                    if Result < r {
                        Result = Event.Tick + d;
                        if Result < r {
                            Result = r + System.GaussRandom(w);
                            if Result < r {
                                Result = r + w;
                            }
                        }
                    }
                }
            }
        }

        if n {
            chordOff[Event.Channel][Event.Tick] = Result
        }
    }

    def noteOff(Event, velocity) {
        local t = tickOff(Event);
        local e = expression[Event.Channel];
        local v = (humanize(velocity, velocity, velocityWidth) * e) / 127;
        record_note_length(Event.Channel, Event.Pitch, t);
        System.Print("NOTE OFF: " + System.ToString(Event.Tick) + " => " + System.ToString(t));
        emit NOTE_OFF(Event.Channel, Event.Pitch, v) at t;
    }

    def record_note_length(channel, pitch, tick) {
        local start = running[channel][pitch];
        local length = tick - start;
        notes[tracknum][channel][start][pitch] = length;
    }

    def Expression(Event) {
        // Record the expression value
        expression[Event.Channel] = Event.Value;
        if factorExpression == 0 {
            emit;
        }
    }

    def Volume(Event) {
        // Record the volume value
        volume[Event.Channel] = Event.Value;
        if factorVolume == 0 {
            emit;
        }
    }

    def Portamento(Event) {
        portamento = Event.Value
    }

    def PortamentoTime(Event) {
        // humanize this Event too
        local v = Event.Value;
        v = humanize(v, v, velocityWidth);
        local t = tick(Event.Tick, 0, timeN, timeD);
        emit CONTROL_CHANGE(Event.Channel, PORTAMENTO_TIME, v) at t;
    }

    def GeneralPurpose1(Event){
        System.Print("GP1: " + System.ToString(Event.Value));
    }

    def GeneralPurpose2(Event){
        System.Print("GP2: " + System.ToString(Event.Value));
    }

    def GeneralPurpose3(Event){
        System.Print("GP3: " + System.ToString(Event.Value));
    }

    def GeneralPurpose4(Event){
        System.Print("GP4: " + System.ToString(Event.Value));
    }

    def Effect1(Event) {
        System.Print("EF1: " + System.ToString(Event.Value));
        legatoStrength = Event.Value;
    }

    def Effect2(Event) {
        System.Print("EF2: " + System.ToString(Event.Value));
        beatDepth = Event.Value;
    }

    def ParseText(Event) {
        local m = /^(?<free>.*?)=mac:(?<var>[a-zA-Z]+)=(?<expr>.*)$/.Matcher(Event.Text)
        if m.Matches() {
            local free = m.Group("free");
            local var = m.Group("var");
            local expr = m.Group("expr");
            System.Print("==> Text | free: " + free +" | var: " + var + " | expr: " + expr);
            local value = System.FromString(expr);
            if var == "set" {
                setFromArg(System.FromString(expr));
            } else if var == "time_numerator" {
                timeN = value;
            } else if var == "time_denominator" {
                timeD = value;
            } else {
                System.Print("**** UNKNOWN VARIABLE: " + var);
            }
            if free != "" {
                if Event.Type == LYRICS {
                    emit LYRICS(free);
                }
            }
        } else {
            System.Print("==> Text: " + Event.Text);
            emit;
        }
    }

}
