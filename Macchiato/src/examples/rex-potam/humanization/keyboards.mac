#!/usr/bin/macchiato
/*
 * This file is part of Macchiato.
 *
 * Macchiato is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * Macchiato is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Macchiato.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * This is the humanization for keyboards.
 *
 * In fact, it is a bit badly named; should be for SOLOISTS. Notes run
 * a bit wilder, except chords that are tighter.
 */

import itf "interface.mac";
import utl "utils.mac";

def humanize(value, anchor, percent) {
    if value == 0 {
        result = 0;
    } else {
        result = utl.Anchored(value, anchor, percent);
        if result <= 0 {
            result = 1;
        }
    }
}

def range(bpm, percent) {
    result = bpm * 2 / percent;
    if result < percent {
        result = percent;
    }
}

def tick(tick, bpm, percent, sign, canCollide) {
    local r = range(bpm, percent);
    if (sign == 0) {
        // +/- 'percent'% bpm
        result = tick + random(r) - r;
    } else {
        // 10% bpm * sign with a slight offset to allow small collisions
        local t = random(r / 2);
        if canCollide {
            local m = (r * percent) / 80;
            t = t - random(m);
        }
        result = tick + t * sign;
    }
    if result < 1 {
        result = 1;
    }
}

class runningRecord {

    In;
    Out;

    def runningRecord(i, o) {
        In = i;
        Out = o;
    }

}

class KeyboardsHumanizer (itf.Humanizer) {

    // current track number
    tracknum;

    // portamento pedal state (true is down)
    portamento;

    // beats per minute
    bpm;

    // current velocity, per channel, per pitch
    velocity;

    // current expression, per channel
    expression;

    // current volume, per channel
    volume;

    // currently running notes per channel
    // For each channel, the array index is the pitch of the note;
    // its value is the start tick of the note
    running;
    // actual start of notes for a same chord
    start;
    // actual end of notes for a same chord
    stop;

    // note lengths per track, per channel
    // For each track, each channel, the array index is the start tick of each note;
    // its value is an array: index = pitch, value = length
    notes;

    // configuration: velocity wildness (in %)
    percent_velocity;

    // configuration: ticks wildness (in % of BPM)
    percent_tick;

    def KeyboardsHumanizer(pv, pt) {
        tracknum = 0;
        percent_velocity = pv;
        percent_tick = pt;
        print("v:" + toString(percent_velocity) + "% - t:" + toString(percent_tick) + "%");
    }

    def StartSequence() {
        print("Running keyboards humanizer");
    }

    def EndSequence() {
        write("record", record);
        write("notes", notes);
    }

    def StartTrack() {
        velocity = [[], [], [], [], [], [], [], [],
                    [], [], [], [], [], [], [], []];

        expression = [127, 127, 127, 127, 127, 127, 127, 127,
                      127, 127, 127, 127, 127, 127, 127, 127];

        volume = [127, 127, 127, 127, 127, 127, 127, 127,
                  127, 127, 127, 127, 127, 127, 127, 127];

        running = [[], [], [], [], [], [], [], [],
                   [], [], [], [], [], [], [], []];

        start = [];

        stop = [];

        notes[tracknum] = [[], [], [], [], [], [], [], [],
                           [], [], [], [], [], [], [], []];

        portamento = false;

        bpm = 100;
    }

    def EndTrack() {
        record[tracknum] = {
            "velocity": velocity,
            "expression": expression
        };
        tracknum = tracknum + 1;
    }

    def TrackNumber() {
        result = tracknum;
    }

    def Tempo(event) {
        bpm = event.Bpm;
    }

    def NoteOn(event) {
        // Record the velocity
        velocity[event.Channel][event.Pitch] = event.Velocity;

        if (event.Channel == 9) or (volume[event.Channel] > 0) {
            // Emit an event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            local v = velocity[event.Channel][event.Pitch];
            local e = expression[event.Channel];
            if (v > 0) and (e > 0) {
                v = (humanize(v, v, percent_velocity) * e) / 127;
                local t;
                if start[event.Tick] exists {
                    t = tick(start[event.Tick], bpm, percent_tick / 2, 1,
                             (running[event.Channel][event.Pitch] exists) and (running[event.Channel][event.Pitch].In > 0));
                } else {
                    t = tick(event.Tick, bpm, percent_tick, 1,
                             (running[event.Channel][event.Pitch] exists) and (running[event.Channel][event.Pitch].In > 0));
                    start[event.Tick] = t;
                }
                running[event.Channel][event.Pitch] = runningRecord(event.Tick, t);
                emit NOTE_ON(event.Channel, event.Pitch, v) at t;
            } else {
                velocity[event.Channel][event.Pitch] = 0;
            }
        }
    }

    def NoteOnOff(event) {
        if (event.Channel != 9) and (volume[event.Channel] == 0) {
            next;
        }

        // Emit an event with a velocity that depends on the expression,
        // and with a bit of random for rough "humanization"
        // Note that expression may have changed so the release velocity is not
        // necessarily equal to the press velocity
        local t;
        if stop[event.Tick] exists {
            t = tick(stop[event.Tick], bpm, percent_tick / 2, 1,
                     (running[event.Channel][event.Pitch] exists) and (running[event.Channel][event.Pitch].In > 0));
        } else {
            t = tick(event.Tick, bpm, percent_tick, -1,
                     (running[event.Channel][event.Pitch] exists) and (running[event.Channel][event.Pitch].In > 0));
            stop[event.Tick] = t;
        }
        if portamento {
            velocity[event.Channel][event.Pitch] = t;
            emit NOTE_ON(event.Channel, event.Pitch, 0) at t;
        } else if velocity[event.Channel][event.Pitch] > 0 {
            if t < running[event.Channel][event.Pitch].Out {
                if t < running[event.Channel][event.Pitch].In {
                    print("**** note-on after actual note-off!!");
                    t = running[event.Channel][event.Pitch].In + bpm / percent;
                } else {
                    print("**** note-off before note-on, using real value");
                    t = event.Tick;
                }
            }
            local v = velocity[event.Channel][event.Pitch];
            local e = expression[event.Channel];
            v = (humanize(v, v, percent_velocity) * e) / 127;
            record_note_length(event.Channel, event.Pitch, t);
            running[event.Channel][event.Pitch] = runningRecord(-1, -1);
            emit NOTE_OFF(event.Channel, event.Pitch, v) at t;
        }
    }

    def record_note_length(channel, pitch, tick) {
        if running[channel][pitch] exists {
            local start = running[channel][pitch].Out;
            if start > 0 {
                local length = tick - start;
                notes[tracknum][channel][start][pitch] = length;
            }
        }
    }

    def NoteOff(event) {
        // For completion only -- because NoteWorthy Composer
        // does not emit those events

        if (volume[event.Channel] > 0) and (velocity[event.Channel][event.Pitch] > 0) {
            // Emit an event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            // Note that expression may have changed so the release velocity is not
            // necessarily equal to the press velocity
            local v = (event.Velocity * expression[event.Channel]) / 127;
            v = humanize(v, v, percent_velocity);
            local t;
            if stop[event.Tick] exists {
                t = tick(stop[event.Tick], bpm, percent_tick / 2, -1,
                         (running[event.Channel][event.Pitch] exists) and (running[event.Channel][event.Pitch].In > 0));
            } else {
                t = tick(event.Tick, bpm, percent_tick, -1,
                         (running[event.Channel][event.Pitch] exists) and (running[event.Channel][event.Pitch].In > 0));
            }
            if t < running[event.Channel][event.Pitch].Out {
                if t < running[event.Channel][event.Pitch].In {
                    print("**** note-on after actual note-off!!");
                    t = running[event.Channel][event.Pitch].In + bpm / percent;
                } else {
                    print("**** note-off before note-on, using real value");
                    t = event.Tick;
                }
            }
            record_note_length(event.Channel, event.Pitch, t);
            velocity[event.Channel][event.Pitch] = 0;
            running[event.Channel][event.Pitch] = runningRecord(-1, -1);
            emit NOTE_OFF(event.Channel, event.Pitch, v) at t;
        }
    }

    def Expression(event) {
        // Record the expression value
        expression[event.Channel] = event.Value;
    }

    def Volume(event) {
        // Record the volume value
        volume[event.Channel] = event.Value;
    }

    def Portamento(event) {
        portamento = event.Value
    }

    def PortamentoTime(event) {
        // humanize this event too
        local v = event.Value;
        v = humanize(v, v, percent_velocity);
        local t = tick(event.Tick, bpm, percent_tick / 2, 0, false);
        emit CONTROL_CHANGE(event.Channel, PORTAMENTO_TIME, v) at t;
    }

}
