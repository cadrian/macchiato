#!/usr/bin/macchiato
/*
 * This file is part of Macchiato.
 *
 * Macchiato is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * Macchiato is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Macchiato.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * This is the humanization for keyboards.
 *
 * In fact, it is a bit badly named; should be for SOLOISTS. Notes run
 * a bit wilder, except chords that are tighter.
 */

import itf "interface.mac";
import utl "utils.mac";

def humanize(value, anchor, percent) {
    if value == 0 {
        Result = 0;
    } else {
        Result = utl.Anchored(value, anchor, percent);
        if Result < 1 {
            Result = 1;
        }
    }
}

def range(bpm, percent) {
    Result = bpm * 2 / percent;
    if Result < percent {
        Result = percent;
    }
}

def tick(tick, bpm, percent, sign, collision) {
    local r = range(bpm, percent);

    // +/- 'percent'% bpm
    Result = tick + System.GaussRandom(r) + (sign * r) + (collision * (r * percent) / 80);

    if Result < 1 {
        Result = 1;
    }
}

class eventHumanization {

    Tick;
    HumanizedTick;
    Velocity;
    HumanizedVelocity;

    def eventHumanization(t, ht, v, hv) {
        Tick = t;
        HumanizedTick = ht;
        Velocity = v;
        HumanizedVelocity = hv;
    }

}

class KeyboardsHumanizer (itf.Humanizer) {

    // current track number
    tracknum;

    // portamento pedal state (true is down)
    portamento;

    // beats per minute
    bpm;

    // current expression, per channel
    expression;

    // current volume, per channel
    volume;

    // currently running notes per channel
    // For each channel, the array index is the pitch of the note;
    // its value is the start tick of the note
    running;
    // actual start of notes for a same chord
    start;
    // actual end of notes for a same chord
    stop;

    // configuration: velocity wildness (in %)
    percent_velocity;

    // configuration: ticks wildness (in % of BPM)
    percent_tick;

    def KeyboardsHumanizer(pv, pt) {
        tracknum = 0;
        percent_velocity = pv;
        percent_tick = pt;
        System.Print("v:" + System.ToString(percent_velocity) + "% - t:" + System.ToString(percent_tick) + "%");
    }

    def StartSequence() {
        System.Print("Running keyboards humanizer");
    }

    def EndSequence() {
    }

    def StartTrack() {
        expression = [127, 127, 127, 127, 127, 127, 127, 127,
                      127, 127, 127, 127, 127, 127, 127, 127];

        volume = [127, 127, 127, 127, 127, 127, 127, 127,
                  127, 127, 127, 127, 127, 127, 127, 127];

        running = [[], [], [], [], [], [], [], [],
                   [], [], [], [], [], [], [], []];

        start = [];

        stop = [];

        portamento = false;

        bpm = 100;
    }

    def EndTrack() {
        tracknum = tracknum + 1;
    }

    def TrackNumber() {
        Result = tracknum;
    }

    def Tempo(Event) {
        bpm = Event.Bpm;
    }

    def TimeSignature(Event) {
        // TODO
    }

    def NoteOn(Event) {
        if (Event.Channel != 9) and (volume[Event.Channel] > 0) {
            // Emit an Event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            local v = Event.Velocity;
            local e = expression[Event.Channel];
            if (v > 0) and (e > 0) {
                v = (humanize(v, v, percent_velocity) * e) / 127;
                if v > 0 {
                    local t;
                    if start[Event.Tick] exists {
                        // another note starting on the same chord
                        if stop[Event.Tick] exists {
                            t = tick(start[Event.Tick], bpm, percent_tick / 2, 0, 1);
                        } else {
                            t = tick(start[Event.Tick], bpm, percent_tick / 2, 0, 0);
                        }
                    } else if stop[Event.Tick] exists {
                        // previous chord stopped just when this one begins, this is legato, try not to break it too much
                        t = tick(stop[Event.Tick], bpm, percent_tick / 2, 1, 1);
                    } else {
                        t = tick(Event.Tick, bpm, percent_tick, 1, 0);
                        start[Event.Tick] = t;
                    }
                    running[Event.Channel][Event.Pitch] = eventHumanization(Event.Tick, t, Event.Velocity, v);
                }
            }
        }
    }

    def play(startRunningRecord, endRunningRecord, channel, pitch) {
        local startTick;
        local endTick;
        local length = endRunningRecord.Tick - startRunningRecord.Tick;

        if length == 0 {
            next;
        }

        startTick = tick(startRunningRecord.HumanizedTick, bpm + length, percent_tick / 4, 1, 0);

        if stop[endRunningRecord.Tick] exists {
            // this is another note stopping on the same chord
            endTick = tick(stop[endRunningRecord.Tick], bpm + length, percent_tick / 2, 0, 0);
        } else {
            endTick = tick(Event.Tick, bpm + length, percent_tick, -1, 0);
            stop[endRunningRecord.Tick] = endTick;
        }

        local st;
        local et;

        if startTick < endTick {
            st = startTick;
            et = endTick;
        } else if startRunningRecord.HumanizedTick < endTick {
            System.Print("**** Note PARTIALLY HUMANIZED");
            st = startRunningRecord.HumanizedTick;
            et = endTick;
        } else {
            System.Print("**** Note NOT HUMANIZED");
            st = startRunningRecord.Tick;
            et = endRunningRecord.Tick;
        }
        System.Print("NOTE: " + System.ToString(startRunningRecord.Tick) + "-" + System.ToString(endRunningRecord.Tick)
            + " => " + System.ToString(st) + "-" + System.ToString(et));
        emit NOTE_ON(channel, pitch, startRunningRecord.HumanizedVelocity) at st;
        emit NOTE_OFF(channel, pitch, endRunningRecord.HumanizedVelocity) at et;

        // done for this note
        running[channel][pitch] = eventHumanization(-1, -1, 0, 0);
    }

    def NoteOnOff(Event) {
        if (Event.Channel != 9) and (volume[Event.Channel] > 0) {
            // Emit an Event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            // Note that expression may have changed so the release velocity is not
            // necessarily equal to the press velocity
            local t;
            local r;

            if running[Event.Channel][Event.Pitch] exists {
                r = running[Event.Channel][Event.Pitch]
            } else {
                next;
            }

            if portamento {
                if stop[Event.Tick] exists {
                    t = tick(stop[Event.Tick], bpm, percent_tick / 2, 1, r.In > 0);
                } else {
                    t = tick(Event.Tick, bpm, percent_tick, -1, r.In > 0);
                    stop[Event.Tick] = t;
                }
                emit NOTE_ON(Event.Channel, Event.Pitch, 0) at t;
            } else if r.Velocity > 0 {
                local v = r.Velocity;
                local e = expression[Event.Channel];
                v = (humanize(v, v, percent_velocity) * e) / 127;
                play(r, eventHumanization(Event.Tick, -1, r.Velocity, v), Event.Channel, Event.Pitch);
            }
        }
    }

    def NoteOff(Event) {
        // For completion only -- because NoteWorthy Composer
        // does not emit those Events

        if (Event.Channel != 9) and (volume[Event.Channel] > 0) {
            // Emit an Event with a velocity that depends on the expression,
            // and with a bit of random for rough "humanization"
            // Note that expression may have changed so the release velocity is not
            // necessarily equal to the press velocity
            local r = running[Event.Channel][Event.Pitch]
            if r.Velocity > 0 {
                local v = Event.Velocity;
                local e = expression[Event.Channel];
                v = (humanize(v, v, percent_velocity) * e) / 127;
                play(r, eventHumanization(Event.Tick, -1, Event.Velocity, v), Event.Channel, Event.Pitch);
            }
        }
    }

    def Expression(Event) {
        // Record the expression value
        expression[Event.Channel] = Event.Value;
    }

    def Volume(Event) {
        // Record the volume value
        volume[Event.Channel] = Event.Value;
    }

    def Portamento(Event) {
        portamento = Event.Value
    }

    def PortamentoTime(Event) {
        // humanize this Event too
        local v = Event.Value;
        v = humanize(v, v, percent_velocity);
        local t = tick(Event.Tick, bpm, percent_tick / 2, 0, false);
        emit CONTROL_CHANGE(Event.Channel, PORTAMENTO_TIME, v) at t;
    }

}
