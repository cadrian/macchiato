/*
 * This file is part of Macchiato.
 *
 * Macchiato is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * Macchiato is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Macchiato.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * Advanced example, used by Rex Potam
 * http://www.cadrian.net/rex-potam/
 *
 * This ruleset fixes a few shortcomings of the MIDI production chain
 * used by the songwriter:
 *
 * - NoteWorthy Composer emits NOTE_ON(velocity=0) instead of NOTE_OFF
 *   events
 *
 * - fluidsynth uses the Expression MPC as a simple volume switch,
 *   whereas Rex uses it for actual dynamics, and rough velocities for
 *   musicality (e.g. strong vs weak beats, musical phrases); these
 *   rules combine the expression and velocity to emit actual note
 *   velocities
 *
 * This also adds a bit of random for "humanization".
 */

import h "humanize.mac";

def humanize(value, anchor, percent) {
	result = h.anchored(value, anchor, percent);
}

def initTrack() {
    // velocity records the current velocity, per channel, per pitch
    velocity = [];

    // expression records the current expression, per channel
    expression = [];

    // fill default values
    local channel = 0;
    while (channel < 16) {
        # no notes yet...
        velocity[channel] = [];

        # default expression is full on
        expression[channel] = 127;

        channel = channel + 1;
    }
}

BEGIN SEQUENCE {
	record = [];
	tracknum = 0;
}

BEGIN TRACK {
	initTrack();
}

(event.type == CONTROL_CHANGE) and (event.mpc == EXPRESSION) {
    // Record the expression value
    expression[event.channel] = event.value;

    next;
}

(event.type == NOTE_ON) and (event.velocity > 0) {
    // Record the velocity
    velocity[event.channel][event.pitch] = event.velocity;

    // Emit an event with a velocity that depends on the expression,
    // and with a bit of random for rough "humanization"
    v = (velocity[event.channel][event.pitch] * expression[event.channel]) / 127;
    emit NOTE_ON(event.channel, event.pitch, humanize(v, v, 10)) at event.tick + random(5);

    next;
}

(event.type == NOTE_ON) and (event.velocity == 0) {
    // Emit an event with a velocity that depends on the expression,
    // and with a bit of random for rough "humanization"
    // Note that expression may have changed so the release velocity is not
    // necessarily equal to the press velocity
    v = (velocity[event.channel][event.pitch] * expression[event.channel]) / 127;
    emit NOTE_OFF(event.channel, event.pitch, humanize(v, v, 10)) at event.tick - random(5);

    next;
}

(event.type == NOTE_OFF) {
    // Emit an event with a velocity that depends on the expression,
    // and with a bit of random for rough "humanization"
    // Note that expression may have changed so the release velocity is not
    // necessarily equal to the press velocity
    v = (event.velocity * expression[event.channel]) / 127;
    emit NOTE_OFF(event.channel, event.pitch, humanize(v, v, 10)) at event.tick - random(5);

    next;
}

END TRACK {
	record[tracknum] = {
		"velocity": velocity,
		"expression": expression
	};
	tracknum = tracknum + 1;
}

END SEQUENCE {
	write("record", record);
}