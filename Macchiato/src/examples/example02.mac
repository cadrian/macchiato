#!/usr/bin/macchiato
/*
 * This file is part of Macchiato.
 *
 * Macchiato is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * Macchiato is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Macchiato.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * Advanced example, formerly used by Rex Potam
 * http://rex-potam.cadrian.net/
 *
 * (See rex-potam.mac)
 *
 * This ruleset fixes a few shortcomings of the MIDI production chain
 * used by the songwriter:
 *
 * - NoteWorthy Composer emits NOTE_ON(velocity=0) instead of NOTE_OFF
 *   Events -- replace by NOTE_OFF, except if the PORTAMENTO pedal is on
 *
 * - NoteWorthy Composer emits all tracks, even if they are muted --
 *   an input file may be used to map the actual channels to some
 *   useful value
 *
 * - fluidsynth uses the Expression MPC as a simple volume switch,
 *   whereas Rex uses it for actual dynamics, and rough velocities for
 *   musicality (e.g. strong vs weak beats, musical phrases); these
 *   rules combine the expression and velocity to emit actual note
 *   velocities
 *
 * This also adds a bit of random for "humanization".
 */

import h "humanize.mac";

def humanize(value, anchor, percent) {
    if value == 0 {
        Result = 0;
    } else {
        Result = h.Anchored(value, anchor, percent);
        if Result <= 0 {
            Result = 1;
        }
    }
}

def initTrack() {
    // velocity records the current velocity, per channel, per pitch
    velocity = [[], [], [], [], [], [], [], [],
                [], [], [], [], [], [], [], []];

    // expression records the current expression, per channel
    expression = [127, 127, 127, 127, 127, 127, 127, 127,
                  127, 127, 127, 127, 127, 127, 127, 127];

    // volume records the current expression, per channel
    volume = [127, 127, 127, 127, 127, 127, 127, 127,
              127, 127, 127, 127, 127, 127, 127, 127];

    // running records the currently running notes per channel
    // For each channel, the array index is the pitch of the note;
    // its value is the start tick of the note
    running = [[], [], [], [], [], [], [], [],
               [], [], [], [], [], [], [], []];

    // notes records the note lengths per track, per channel
    // For each track, each channel, the array index is the start tick of each note;
    // its value is an array: index = pitch, value = length
    notes[tracknum] = [[], [], [], [], [], [], [], [],
                       [], [], [], [], [], [], [], []];

    // Portamento pedal state
    portamento = false;
}

def tick(Event, sign) {
    // humanize tick, except for the drummer (that sounds drunk)
    if Event.Channel == 10 {
        Result = Event.Tick;
    } else if sign == 0 {
        Result = Event.Tick + random(10) - 5;
    } else {
        Result = Event.Tick + random(5) * sign;
    }
}

def note_on(Event) {
    // Record the velocity
    velocity[Event.Channel][Event.Pitch] = Event.Velocity;

    if (Event.Channel == 10) or (volume[Event.Channel] > 0) {
        // Emit an Event with a velocity that depends on the expression,
        // and with a bit of random for rough "humanization"
        local v = velocity[Event.Channel][Event.Pitch];
        local e = expression[Event.Channel];
        if (v > 0) and (e > 0) {
            v = (humanize(v, v, 10) * e) / 127;
            local t = tick(Event, 1);
            running[Event.Channel][Event.Pitch] = t;
            emit NOTE_ON(Event.Channel, Event.Pitch, v) at t;
        } else {
            velocity[Event.Channel][Event.Pitch] = 0;
        }
    }
}

def record_note_length(channel, pitch, tick) {
    local start = running[channel][pitch];
    local length = tick - start;
    notes[tracknum][channel][start][pitch] = length;
}

def note_on_off(Event) {
    if (Event.Channel != 10) and (volume[Event.Channel] == 0) {
        next;
    }

    // Emit an Event with a velocity that depends on the expression,
    // and with a bit of random for rough "humanization"
    // Note that expression may have changed so the release velocity is not
    // necessarily equal to the press velocity
    local t = tick(Event, -1);
    if portamento {
        velocity[Event.Channel][Event.Pitch] = t;
        emit NOTE_ON(Event.Channel, Event.Pitch, 0) at t;
    } else if velocity[Event.Channel][Event.Pitch] > 0 {
        local v = velocity[Event.Channel][Event.Pitch];
        local e = expression[Event.Channel];
        v = (humanize(v, v, 10) * e) / 127;
        record_note_length(Event.Channel, Event.Pitch, t);
        emit NOTE_OFF(Event.Channel, Event.Pitch, v) at t;
    }
}

def note_off(Event) {
    // For completion only -- because NoteWorthy Composer
    // does not emit those Events

    if (volume[Event.Channel] > 0) and (velocity[Event.Channel][Event.Pitch] > 0) {
        // Emit an Event with a velocity that depends on the expression,
        // and with a bit of random for rough "humanization"
        // Note that expression may have changed so the release velocity is not
        // necessarily equal to the press velocity
        local v = (Event.Velocity * expression[Event.Channel]) / 127;
        v = humanize(v, v, 10);
        local t = tick(Event, -1);
        record_note_length(Event.Channel, Event.Pitch, t);
        velocity[Event.Channel][Event.Pitch] = 0;
        emit NOTE_OFF(Event.Channel, Event.Pitch, v) at t;
    }
}

def portamento_time(Event) {
    // humanize this Event too
    local v = Event.Value;
    v = humanize(v, v, 10);
    local t = tick(Event, 0);
    emit CONTROL_CHANGE(Event.Channel, PORTAMENTO_TIME, v) at t;
}

BEGIN SEQUENCE {
    tracknum = 0;
    channel_map = [];
}

BEGIN TRACK {
    initTrack();
}

(Event.Type == CONTROL_CHANGE) and (Event.Mpc == PORTAMENTO) {
    portamento = Event.Value;
}

(Event.Type == CONTROL_CHANGE) and (Event.Mpc == PORTAMENTO_TIME) {
    portamento_time(Event);
    next;
}

(Event.Type == CONTROL_CHANGE) and (Event.Mpc == EXPRESSION) {
    // Record the expression value
    expression[Event.Channel] = Event.Value;
    next;
}

(Event.Type == CONTROL_CHANGE) and (Event.Mpc == CHANNEL_VOLUME) {
    // Record the volume value
    volume[Event.Channel] = Event.Value;
    emit;
    next;
}

(Event.Type == PROGRAM_CHANGE) and (Event.Channel == 10) {
    // Don't emit program change on channel 10
    next;
}

(Event.Type == NOTE_ON) and (Event.Velocity > 0) {
    note_on(Event);
    next;
}

(Event.Type == NOTE_ON) and (Event.Velocity == 0) {
    note_on_off(Event);
    next;
}

(Event.Type == NOTE_OFF) {
    note_off(Event);
    next;
}

END TRACK {
    record[tracknum] = {
        "velocity": velocity,
        "expression": expression
    };
    tracknum = tracknum + 1;
}

END SEQUENCE {
    write("record", record);
    write("notes", notes);
}
